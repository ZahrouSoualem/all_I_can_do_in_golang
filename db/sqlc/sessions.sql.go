// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSessions = `-- name: CreateSessions :one
INSERT INTO sessions (
id,
userid,
refresh_token,
expires_at,
created_at
) VALUES ($1,$2,$3,$4,$5) RETURNING id, userid, refresh_token, isbloced, expires_at, created_at
`

type CreateSessionsParams struct {
	ID           uuid.UUID `json:"id"`
	Userid       int64     `json:"userid"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) CreateSessions(ctx context.Context, arg CreateSessionsParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSessions,
		arg.ID,
		arg.Userid,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.RefreshToken,
		&i.Isbloced,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessions = `-- name: GetSessions :one
SELECT id, userid, refresh_token, isbloced, expires_at, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSessions(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessions, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.RefreshToken,
		&i.Isbloced,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateSessions = `-- name: UpdateSessions :one
UPDATE  sessions set isbloced=$2 where id=$1  RETURNING id, userid, refresh_token, isbloced, expires_at, created_at
`

type UpdateSessionsParams struct {
	ID       uuid.UUID `json:"id"`
	Isbloced bool      `json:"isbloced"`
}

func (q *Queries) UpdateSessions(ctx context.Context, arg UpdateSessionsParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSessions, arg.ID, arg.Isbloced)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.RefreshToken,
		&i.Isbloced,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
