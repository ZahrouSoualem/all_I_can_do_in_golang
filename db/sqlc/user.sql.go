// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
username,
hash_password
) VALUES ($1,$2) RETURNING id, username, hash_password
`

type CreateUserParams struct {
	Username     string `json:"username"`
	HashPassword string `json:"hash_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashPassword)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.HashPassword)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hash_password FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.HashPassword)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, hash_password FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.HashPassword)
	return i, err
}

const getUsersList = `-- name: GetUsersList :many
SELECT id, username, hash_password FROM users
`

func (q *Queries) GetUsersList(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.HashPassword); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET username = $2
WHERE id = $1
RETURNING id, username, hash_password
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.HashPassword)
	return i, err
}
